#pragma once
#include "header.h"
#include <imgui.h>

class Palette_Handler;

class Palette
{
	friend class Palette_Handler;

public:
	enum paletteType :unsigned int {
		NONE = 0,
		READONLY = 1 << 0,	//means that these may have an overriding palette which shown be shown instead (and that overwriting palette can be reverted to this one)
		MONTH = 1 << 1,
		WEEKDAY = 1 << 2,
		HOUR = 1 << 3,
		YEAR = 1 << 4,
		HIDDEN = 1 << 5,
		ANY=0xFFFF
	};

	Palette(std::string name_, int id_, int parentId_, unsigned int flags_, int startingPoint_, std::vector<RGBA> colors_);
	Palette(std::string name_, unsigned int flags_, std::vector<RGBA> colors_);

private:
	std::string name;
	int id;
	int parentId;	//usually 0, but if a palette is overwriting another, this'll be what it reverts to
	unsigned int flags;
	int startingPoint;
	std::vector <RGBA> colors;

	static inline int nextId = 0;
};

class Palette_Handler
{
public:
	static void AddUserPalette(Palette p);
//	static RGBA* PalettePointer(unsigned int index);
//	static unsigned int PaletteSize(unsigned int index);
	static void FillShaderPalette(float arrayFourFloats[][4], unsigned int arrayRows, unsigned int currentIndex);

	static ImVec4 PaletteColorImVec4(unsigned int index, int c);
	static unsigned int SetColourImVec4(unsigned int currentIndex, int c, ImVec4 colour);

	static ImU32 PaletteColorImU32(unsigned int index, int c);
	
	static unsigned int MatchingPalette(unsigned int currentIndex, unsigned int flags);	//returns new index
	static unsigned int NextMatchingPalette(unsigned int currentIndex, unsigned int flag);

	static void RotatePaletteLeft(unsigned int currentIndex);
	static void RotatePaletteRight(unsigned int currentIndex);


	static std::string PaletteName(unsigned int index);

private:
	static unsigned int IndexFromId(int pId);
	static void RotatePalette(unsigned int currentIndex, int amount);

	static inline std::vector <Palette> palette
	{
				{
			"Discrete", Palette::paletteType::READONLY | Palette::paletteType::YEAR,
			{ {0xfd, 0xfd, 0x16, 0xff},
			{0xd0, 0x4d, 0x60, 0xff},
			{0xb1, 0xbe, 0xfa, 0xff},
			{0x1c, 0xfd, 0xf1, 0xff},
			{0xf9, 0x85, 0x00, 0xff},
			{0xa9, 0x55, 0xd0, 0xff},
			{0x9b, 0x6c, 0x6a, 0xff},
			{0xfb, 0xc8, 0x7a, 0xff},
			{0xed, 0xff, 0xed, 0xff},
			{0x9f, 0xe6, 0x00, 0xff},
			{0x22, 0xc7, 0xe9, 0xff},
			{0xfc, 0x0d, 0xf8, 0xff},
			{0xf6, 0x00, 0x00, 0xff},
			{0xfe, 0x76, 0xc8, 0xff},
			{0x3d, 0x84, 0x84, 0xff},
			{0xc0, 0x0d, 0xfe, 0xff},
			{0x00, 0xaa, 0xfd, 0xff},
			{0xff, 0x00, 0x85, 0xff},
			{0x6d, 0xfc, 0xb2, 0xff},
			{0x49, 0x69, 0xff, 0xff},
			{0xe5, 0xff, 0xa3, 0xff},
			{0xff, 0xc3, 0xef, 0xff},
			{0x4f, 0x8a, 0x35, 0xff},
			{0x00, 0xfe, 0x5d, 0xff} }
		},
		
		{
			"Rainbow Seven", Palette::paletteType::READONLY | Palette::paletteType::WEEKDAY,	//seven colour rainbow for days of week
			{ {0x31,0x52,0xA6,0xff },
				{0x95,0x53,0xa7,0xff },
				{0xc1,0x42,0x55,0xff },
				{0xfe,0x62,0x3e,0xff },
				{0xe5,0xb5,0x4b,0xff },
				{0xa2,0xfd,0x56,0xff },
				{0x01,0x81,0x93,0xff }
			}
		},

		{
			"Rainbow Ten", Palette::paletteType::READONLY | Palette::paletteType::YEAR,	//separate rainbow with ten colours
			{ {0x88, 0x2d, 0x71,0xff },
				{0x19,0x64,0xb0,0xff },
				{0x7b,0xd0,0xdf,0xff },
				{0x4d,0xb2,0x64,0xff },
				{0xca,0xe1,0xac,0xff },
				{0xf7,0xf0,0x57,0xff },
				{0xf4,0xa6,0x37,0xff },
				{0xe8,0x60,0x1c,0xff },
				{0xdb,0x06,0x0b,0xff },
				{0x71,0x19,0x09,0xff },
			}
		},


		{
			"Single Day",Palette::paletteType::READONLY | Palette::paletteType::WEEKDAY,
		{{0xFF, 0xAA, 0x00, 0xFF},
			{0x00, 0x00, 0x00, 0x00},
			{0x00, 0x00, 0x00, 0x00},
			{0x00, 0x00, 0x00, 0x00},
			{0x00, 0x00, 0x00, 0x00},
			{0x00, 0x00, 0x00, 0x00},
			{0x00, 0x00, 0x00, 0x00},
			}
		},

		{
			"deleteme", Palette::paletteType::READONLY,
			{ {0x31, 0x52, 0xA6, 0xff } }
		},
		{
			"ega",Palette::paletteType::READONLY | Palette::paletteType::YEAR,
			{	{0x00,0x00,0x00,0xff },
				{0x00,0x00,0xAA,0xff },
				{0x00,0xAA,0x00,0xff },
				{0x00,0xAA,0xAA,0xff },
				{0xAA,0x00,0x00,0xff },
				{0xAA,0x00,0xAA,0xff },
				{0xAA,0x55,0x00,0xff },
				{0xAA,0xAA,0xAA,0xff },

				{0x55,0x55,0x55,0xff },
				{0x55,0x55,0xFF,0xff },
				{0x55,0xff,0x55,0xff },
				{0x55,0xff,0xff,0xff },
				{0xff,0x55,0x55,0xff },
				{0xff,0x55,0xff,0xff },
				{0xff,0xff,0x55,0xff },
				{0xff,0xff,0xff,0xff }
			}
		},
		{"Dusk til Dawn",Palette::paletteType::READONLY | Palette::paletteType::HOUR,
	{ { 0x0e, 0x15, 0x32, 0xff },
	{ 0x1a, 0x27, 0x5a, 0xff },
	{ 0x25, 0x3c, 0x7f, 0xff },
	{ 0x33, 0x58, 0x9b, 0xff },
	{ 0x47, 0x79, 0xb0, 0xff },
	{ 0x60, 0x99, 0xc4, 0xff },
	{ 0x80, 0xb8, 0xd5, 0xff },
	{ 0xa2, 0xd2, 0xe4, 0xff },
	{ 0xc4, 0xe5, 0xed, 0xff },
	{ 0xe0, 0xf3, 0xe5, 0xff },
	{ 0xf4, 0xf7, 0xca, 0xff },
	{ 0xfc, 0xed, 0xa5, 0xff },
	{ 0xfc, 0xd6, 0x87, 0xff },
	{ 0xfa, 0xb7, 0x6d, 0xff },
	{ 0xf5, 0x93, 0x57, 0xff },
	{ 0xee, 0x6d, 0x43, 0xff },
	{ 0xe0, 0x4a, 0x34, 0xff },
	{ 0xca, 0x2b, 0x2a, 0xff },
	{ 0xb0, 0x12, 0x25, 0xff },
	{ 0x96, 0x04, 0x22, 0xff },
	{ 0x73, 0x00, 0x1b, 0xff },
	{ 0x44, 0x00, 0x10, 0xff },
	{ 0x1a, 0x07, 0x13, 0xff },
	{ 0x08, 0x0f, 0x1d, 0xff } }
	}
	};
};